import streamlit as st
import re
from docx import Document
import math

# =========================
# C·∫•u h√¨nh giao di·ªán (canh gi·ªØa)
# =========================
st.set_page_config(page_title="Ng√¢n h√†ng c√¢u h·ªèi lu·∫≠t", page_icon="‚öñÔ∏è", layout="wide")
st.markdown("""
    <style>
    .main { display: flex; justify-content: center; }
    div.block-container { text-align: center; max-width: 900px; padding-top: 1rem; }
    .stRadio > label { font-weight: normal; }
    .stButton>button { width: 60%; margin: 10px auto; display: block; border-radius: 10px; font-size: 18px; padding: 0.6rem 1rem; }
    </style>
""", unsafe_allow_html=True)

st.title("‚öñÔ∏è NG√ÇN H√ÄNG C√ÇU H·ªéI KI·ªÇM TRA LU·∫¨T (SOP)")

# =========================
# H√†m ƒë·ªçc file .docx (l·ªçc ch√≠nh x√°c, b·ªè Ref.)
# =========================
def load_questions(docx_path):
    try:
        doc = Document(docx_path)
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file Word: {e}")
        return [], [], []

    # L·∫•y paragraphs (lo·∫°i b·ªè d√≤ng r·ªóng)
    paragraphs = [p.text.rstrip() for p in doc.paragraphs if p.text and p.text.strip()]

    questions = []
    problematic = []  # l∆∞u c√°c ƒëo·∫°n nghi ng·ªù
    current = {"question": "", "options": [], "answer": None}
    prev_non_option = None

    # Regex linh ho·∫°t cho ƒë√°p √°n:
    # c√≥ th·ªÉ c√≥ s·ªë th·ª© t·ª± tr∆∞·ªõc (v√≠ d·ª• "29. a. ..."), c√≥ th·ªÉ c√≥ '*', ch·ªØ hoa/th∆∞·ªùng,
    # nh·∫≠n c√°c d·∫•u . ) - ‚Äì :
    opt_re = re.compile(r'^\s*(?:\d+\.\s*)?([\*]?)\s*([a-zA-Z])\s*[\.\)\-‚Äì:]\s*(.*)$')

    for idx, line in enumerate(paragraphs):
        # B·ªè ho√†n to√†n d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng Ref (Ref., Ref:, ref., v.v.)
        if re.match(r'^\s*Ref[:\.]\s*', line, re.IGNORECASE):
            # b·ªè qua d√≤ng Ref.
            continue

        # th·ª≠ detect ƒë√°p √°n
        m = opt_re.match(line)
        if m:
            star = m.group(1) or ""
            letter = m.group(2)
            opt_text = m.group(3).strip()

            # n·∫øu kh√¥ng c√≥ ƒëo·∫°n question hi·ªán t·∫°i nh∆∞ng c√≥ prev_non_option -> d√πng l√†m question
            if not current["question"] and prev_non_option:
                current["question"] = prev_non_option
                prev_non_option = None

            # n·∫øu opt_text r·ªóng th√¨ ƒë√°nh d·∫•u problematic
            if not opt_text:
                problematic.append((idx, line))
                continue

            current["options"].append(opt_text)
            if star:
                current["answer"] = opt_text

        else:
            # kh√¥ng ph·∫£i d√≤ng ƒë√°p √°n
            # n·∫øu current ƒë√£ c√≥ options => ƒë√¢y l√† kh·∫£ nƒÉng b·∫Øt ƒë·∫ßu c√¢u m·ªõi
            if current["options"]:
                # chu·∫©n h√≥a: n·∫øu ch·ªâ c√≥ 1 option v√† ch∆∞a c√≥ answer th√¨ set lu√¥n
                if not current["answer"] and len(current["options"]) == 1:
                    current["answer"] = current["options"][0]

                # lo·∫°i b·ªè s·ªë th·ª© t·ª± ƒë·ª©ng ƒë·∫ßu c√¢u (n·∫øu c√≥) cho hi·ªÉn th·ªã g·ªçn
                current["question"] = re.sub(r'^\s*\d+\.\s*', '', current["question"]).strip()

                # n·∫øu h·ª£p l·ªá th√¨ l∆∞u
                if current["question"] and current["options"]:
                    questions.append(current)
                else:
                    problematic.append(("incomplete", current))

                # b·∫Øt ƒë·∫ßu c√¢u m·ªõi t·ª´ d√≤ng hi·ªán t·∫°i
                current = {"question": line.strip(), "options": [], "answer": None}
                prev_non_option = line.strip()
            else:
                # ch∆∞a c√≥ options -> ƒëang n·ªëi n·ªôi dung c√¢u h·ªèi
                if current["question"]:
                    current["question"] += " " + line.strip()
                else:
                    current["question"] = line.strip()
                prev_non_option = line.strip()

    # sau v√≤ng l·∫∑p: th√™m c√¢u cu·ªëi n·∫øu h·ª£p l·ªá
    if current["options"]:
        if not current["answer"] and len(current["options"]) == 1:
            current["answer"] = current["options"][0]
        current["question"] = re.sub(r'^\s*\d+\.\s*', '', current["question"]).strip()
        if current["question"] and current["options"]:
            questions.append(current)
        else:
            problematic.append(("end_incomplete", current))

    # L·ªçc final: ch·ªâ gi·ªØ nh·ªØng c√¢u c√≥ √≠t nh·∫•t 1 option
    final_questions = []
    for q in questions:
        # lo·∫°i b·ªè b·∫•t k·ª≥ 'Ref.' c√≤n s√≥t trong question (d√π ƒë√£ c·ªë lo·∫°i)
        q_text = re.sub(r'\bRef[:\.].*$', '', q["question"], flags=re.IGNORECASE).strip()
        q["question"] = q_text
        if q["options"]:
            final_questions.append(q)
        else:
            problematic.append(("no_options", q))

    return final_questions, paragraphs, problematic


# =========================
# T·∫£i d·ªØ li·ªáu
# =========================
questions, paragraphs, problematic = load_questions("bank.docx")
TOTAL = len(questions)

if TOTAL == 0:
    st.error("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c c√¢u h·ªèi n√†o. Ki·ªÉm tra l·∫°i file bank.docx ho·∫∑c g·ª≠i m√¨nh v√†i d√≤ng ƒë·∫ßu ƒë·ªÉ m√¨nh ƒëi·ªÅu ch·ªânh.")
    st.stop()

st.success(f"üìò ƒê√£ t·∫£i th√†nh c√¥ng {TOTAL} c√¢u h·ªèi (Ref. ƒë√£ b·ªã lo·∫°i b·ªè).")

# Hi·ªÉn th·ªã debug (t√πy ch·ªçn, gi√∫p t√¨m 2 c√¢u b·ªã l·∫°c)
with st.expander("üîé Xem th√¥ng tin debug (ƒëo·∫°n kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán)"):
    st.write(f"T·ªïng paragraphs: {len(paragraphs)}")
    st.write(f"S·ªë c√¢u ƒë·ªçc ƒë∆∞·ª£c: {TOTAL}")
    st.write(f"S·ªë ƒëo·∫°n nghi ng·ªù (problematic): {len(problematic)} ‚Äî (nhi·ªÅu khi l√† ƒëo·∫°n r·ªóng ho·∫∑c format l·∫°)")
    if problematic:
        st.markdown("**M·ªôt v√†i ƒëo·∫°n problem (index, n·ªôi dung):**")
        for item in problematic[:50]:
            st.write(item)

# =========================
# Chia nh√≥m 20 c√¢u, gi·ªØ th·ª© t·ª± g·ªëc
# =========================
group_size = 20
num_groups = math.ceil(TOTAL / group_size)
group_labels = [f"C√¢u {i*group_size+1} - {min((i+1)*group_size, TOTAL)}" for i in range(num_groups)]

# khi ƒë·ªïi group -> reset tr·∫°ng th√°i tr·∫£ l·ªùi/n·ªôp
if "last_group" not in st.session_state:
    st.session_state.last_group = None
if "submitted" not in st.session_state:
    st.session_state.submitted = False

selected_group = st.selectbox("üìã B·∫°n mu·ªën l√†m nh√≥m c√¢u n√†o?", group_labels, index=0)

# N·∫øu ƒë·ªïi nh√≥m, clear m·ªçi key q_... v√† reset submitted
if st.session_state.last_group != selected_group:
    for k in list(st.session_state.keys()):
        if k.startswith("q_"):
            del st.session_state[k]
    st.session_state.submitted = False
    st.session_state.last_group = selected_group

start_idx = group_labels.index(selected_group) * group_size
end_idx = min(start_idx + group_size, TOTAL)
batch = questions[start_idx:end_idx]

# =========================
# Hi·ªÉn th·ªã 20 c√¢u c√πng l√∫c (v·ªõi placeholder "(Ch∆∞a ch·ªçn)")
# =========================
if not st.session_state.submitted:
    st.markdown(f"### üß© Nh√≥m {selected_group}")

    for i, q in enumerate(batch, start=start_idx + 1):
        st.markdown(f"**{i}. {q['question']}**")
        opts = ["(Ch∆∞a ch·ªçn)"] + q["options"]
        # radio v·ªõi placeholder
        st.radio("", opts, index=0, key=f"q_{i}")
        st.markdown("<hr>", unsafe_allow_html=True)

    if st.button("‚úÖ N·ªôp b√†i v√† xem k·∫øt qu·∫£"):
        st.session_state.submitted = True
        st.rerun()

else:
    # T√≠nh ƒëi·ªÉm v√† hi·ªÉn th·ªã k·∫øt qu·∫£
    score = 0
    for i, q in enumerate(batch, start=start_idx + 1):
        selected = st.session_state.get(f"q_{i}", "(Ch∆∞a ch·ªçn)")
        correct = q["answer"]
        if selected == "(Ch∆∞a ch·ªçn)":
            is_correct = False
        else:
            is_correct = selected == correct
        if is_correct:
            score += 1
            st.success(f"{i}. {q['question']}\n\n‚úÖ ƒê√∫ng ({correct})")
        else:
            st.error(f"{i}. {q['question']}\n\n‚ùå Sai. ƒê√°p √°n ƒë√∫ng: **{correct}**")
        st.markdown("<hr>", unsafe_allow_html=True)

    st.subheader(f"üéØ K·∫øt qu·∫£: {score}/{len(batch)} c√¢u ƒë√∫ng")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÅ L√†m l·∫°i nh√≥m n√†y"):
            for i in range(start_idx + 1, end_idx + 1):
                key = f"q_{i}"
                if key in st.session_state:
                    del st.session_state[key]
            st.session_state.submitted = False
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è Sang nh√≥m kh√°c"):
            for i in range(start_idx + 1, end_idx + 1):
                key = f"q_{i}"
                if key in st.session_state:
                    del st.session_state[key]
            st.session_state.submitted = False
            st.rerun()
