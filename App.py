# app.py
import streamlit as st
from docx import Document
import re
import pandas as pd
import math

# --------------------------
# Helpers
# --------------------------
def clean_text(s: str) -> str:
    if s is None:
        return ""
    return re.sub(r"\s+", " ", s).strip()

def is_ref_paragraph(text: str) -> bool:
    # X√°c ƒë·ªãnh paragraph ch·ªâ ch·ª©a Ref ho·∫∑c b·∫Øt ƒë·∫ßu b·∫±ng Ref:
    return bool(re.match(r'(?i)^\s*ref[:.]', text)) or bool(re.match(r'(?i)^ref\b', text))

# --------------------------
# Parse CABBANK (ƒë√£ ·ªïn)
# --------------------------
def parse_cabbank(source):
    doc = Document(source)
    paras = [p.text.strip() for p in doc.paragraphs if p.text and p.text.strip()]
    questions = []
    current = {"question": "", "options": [], "answer": ""}

    # Match options only when marker appears at start or after whitespace (avoid A/C...)
    opt_pat = re.compile(r'(?<!\S)(?P<star>\*)?(?P<letter>[A-Da-d])\s*(?:[.\)])\s*')

    for p in paras:
        text = p
        if is_ref_paragraph(text):
            # b·ªè qua d√≤ng Ref
            continue
        matches = list(opt_pat.finditer(text))
        if not matches:
            # kh√¥ng ph·∫£i ƒëo·∫°n option => c√¢u h·ªèi (ho·∫∑c n·ªëi ti·∫øp)
            if current["options"]:
                # ƒë√£ c√≥ options ‚Üí b·∫Øt ƒë·∫ßu c√¢u m·ªõi
                if current["question"] and current["options"]:
                    if not current["answer"]:
                        current["answer"] = current["options"][0]
                    questions.append(current)
                current = {"question": text, "options": [], "answer": ""}
            else:
                # n·ªëi ti·∫øp c√¢u h·ªèi
                current["question"] = (current["question"] + " " + text).strip() if current["question"] else text
            continue

        # C√≥ √≠t nh·∫•t 1 marker trong paragraph
        pre = text[:matches[0].start()].strip()
        if pre:
            # pre c√≥ th·ªÉ l√† ph·∫ßn c√¢u h·ªèi (ho·∫∑c n·∫øu ƒë√£ c√≥ options th√¨ pre l√† c√¢u m·ªõi)
            if current["options"]:
                if current["question"] and current["options"]:
                    if not current["answer"]:
                        current["answer"] = current["options"][0]
                    questions.append(current)
                current = {"question": pre, "options": [], "answer": ""}
            else:
                current["question"] = (current["question"] + " " + pre).strip() if current["question"] else pre

        # L·∫•y t·ª´ng option theo c√°c matches
        for idx, m in enumerate(matches):
            start = m.end()
            end = matches[idx+1].start() if idx+1 < len(matches) else len(text)
            body = clean_text(text[start:end])
            letter = m.group("letter").lower()
            opt_text = f"{letter}. {body}" if body else f"{letter}."
            current["options"].append(opt_text)
            if m.group("star"):
                current["answer"] = opt_text

    # finalize last
    if current["question"] and current["options"]:
        if not current["answer"]:
            current["answer"] = current["options"][0]
        questions.append(current)

    return questions

# --------------------------
# Parse LAWBANK (robust)
# --------------------------
def parse_lawbank(source):
    """
    - Duy·ªát paragraph tu·∫ßn t·ª±.
    - X√°c ƒë·ªãnh paragraph b·∫Øt ƒë·∫ßu c√¢u h·ªèi khi:
        * paragraph vƒÉn b·∫£n b·∫Øt ƒë·∫ßu b·∫±ng '^\d+.'  (v√≠ d·ª• "1. Who ...")
      OR
        * paragraph c√≥ numPr (auto-numbering) v·ªõi ilvl == 0 (top-level list)
    - B·ªè qua c√°c paragraph Ref...
    - Gh√©p c√°c paragraph kh√¥ng ph·∫£i question-start v√†o block hi·ªán t·∫°i.
    - Sau khi c√≥ block, tr√≠ch ƒë√°p √°n b·∫±ng regex an to√†n.
    """
    try:
        doc = Document(source)
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file {source}: {e}")
        return []

    blocks = []
    current_block = None
    question_counter = 1

    for p in doc.paragraphs:
        text = p.text.strip()
        if not text:
            continue

        # B·ªè qua paragraph ref
        if is_ref_paragraph(text):
            continue

        # Ki·ªÉm tra numPr v√† ilvl (n·∫øu c√≥)
        numPr_nodes = p._element.xpath(".//w:numPr")
        ilvl = None
        if numPr_nodes:
            ilvl_nodes = p._element.xpath(".//w:numPr/w:ilvl")
            if ilvl_nodes and ilvl_nodes[0].text is not None:
                try:
                    ilvl = int(ilvl_nodes[0].text)
                except:
                    ilvl = None

        starts_with_number = bool(re.match(r'^\d+\.\s+', text))
        is_question_start = False

        # N·∫øu paragraph c√≥ numPr v√† l√† level 0 => coi l√† b·∫Øt ƒë·∫ßu c√¢u h·ªèi
        if numPr_nodes and ilvl == 0:
            is_question_start = True
        # N·∫øu vƒÉn b·∫£n b·∫Øt ƒë·∫ßu b·∫±ng digit + '.' => c≈©ng coi l√† question start
        if starts_with_number:
            is_question_start = True

        if is_question_start:
            # L·∫•y s·ªë n·∫øu c√≥ trong text ƒë·ªÉ ƒë·ªìng b·ªô counter
            if starts_with_number:
                m = re.match(r'^(\d+)\.\s*(.*)$', text)
                if m:
                    num = int(m.group(1))
                    rest = m.group(2).strip()
                    # ƒë·ªìng b·ªô counter (tr√°nh sai l·ªách n·∫øu doc c√≥ jump)
                    question_counter = num + 1
                    block_text = f"{num}. {rest}" if rest else f"{num}."
                else:
                    # ƒë√°nh s·ªë th·ªß c√¥ng
                    block_text = f"{question_counter}. {text}"
                    question_counter += 1
            else:
                # paragraph c√≥ numPr level 0 nh∆∞ng kh√¥ng ch·ª©a s·ªë literal -> th√™m s·ªë do ch√∫ng ta ƒëo√°n
                block_text = f"{question_counter}. {text}"
                question_counter += 1

            # finalize previous block n·∫øu c√≥
            if current_block:
                blocks.append(current_block)
            current_block = block_text
        else:
            # ƒëo·∫°n kh√¥ng ph·∫£i b·∫Øt ƒë·∫ßu c√¢u h·ªèi: n·ªëi v√†o block hi·ªán t·∫°i (n·∫øu c√≥), ho·∫∑c t·∫°o block m·ªõi (ƒë·ªÅ ph√≤ng file l·∫°)
            if current_block:
                current_block += " " + text
            else:
                # tr∆∞·ªùng h·ª£p hi·∫øm: vƒÉn b·∫£n tr∆∞·ªõc question start, t·∫°o block t·∫°m
                current_block = text

    # Th√™m block cu·ªëi c√πng
    if current_block:
        blocks.append(current_block)

    # B√¢y gi·ªù x·ª≠ l√Ω t·ª´ng block ƒë·ªÉ t√°ch question/options
    questions = []
    # regex option: ch·ªâ match n·∫øu k√Ω t·ª± n·∫±m ·ªü ƒë·∫ßu chu·ªói ho·∫∑c sau whitespace (kh√¥ng match A/C)
    opt_pat = re.compile(r'(?<!\S)(?P<star>\*)?(?P<letter>[A-Da-d])\s*(?:[.\)])\s*')

    for block in blocks:
        b = clean_text(block)
        # Lo·∫°i b·ªè nh·ªØng m·∫©u Ref c√≤n s√≥t trong block (n·∫øu Ref ƒë·ª©ng gi·ªØa)
        b = re.sub(r'(?i)\bRef[:.]\s*.*$', '', b).strip()

        # T√¨m t·∫•t c·∫£ marker option
        matches = list(opt_pat.finditer(b))
        if not matches:
            # N·∫øu block kh√¥ng c√≥ options, skip (kh√¥ng ph·∫£i c√¢u tr·∫Øc nghi·ªám)
            continue

        # c√¢u h·ªèi l√† ph·∫ßn tr∆∞·ªõc marker ƒë·∫ßu ti√™n, b·ªè s·ªë th·ª© t·ª± ·ªü ƒë·∫ßu
        first = matches[0]
        qpart = b[: first.start()]
        # b·ªè prefix s·ªë "N."
        qpart = re.sub(r'^\d+\.\s*', '', qpart).strip()
        qtext = clean_text(qpart)

        opts = []
        answer = ""
        for idx, m in enumerate(matches):
            start = m.end()
            end = matches[idx+1].start() if idx+1 < len(matches) else len(b)
            opt_body = clean_text(b[start:end])
            letter = m.group("letter").lower()
            opt_full = f"{letter}. {opt_body}" if opt_body else f"{letter}."
            opts.append(opt_full)
            if m.group("star"):
                answer = opt_full

        if not answer and opts:
            answer = opts[0]

        questions.append({"question": qtext, "options": opts, "answer": answer})

    return questions

# --------------------------
# UI ch√≠nh
# --------------------------
st.set_page_config(page_title="Ng√¢n h√†ng tr·∫Øc nghi·ªám (Lawbank & Cabbank)", layout="wide")
st.title("üìö Ng√¢n h√†ng c√¢u h·ªèi")

# uploader (t√πy ch·ªçn)
uploaded = st.file_uploader("Upload file .docx (n·∫øu mu·ªën test file ri√™ng)", type=["docx"])

bank_choice = st.selectbox("Ch·ªçn ng√¢n h√†ng:", ["Ng√¢n h√†ng K·ªπ thu·∫≠t", "Ng√¢n h√†ng Lu·∫≠t"])

source = uploaded if uploaded is not None else ("cabbank.docx" if "K·ªπ thu·∫≠t" in bank_choice else "lawbank.docx")

# parse theo bank
if "K·ªπ thu·∫≠t" in bank_choice:
    questions = parse_cabbank(source)
else:
    questions = parse_lawbank(source)

# Debug: hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt gi√∫p r√† l·ªói
with st
