import streamlit as st
from docx import Document
import re
import math

# -----------------------
# Helpers: chu·∫©n ho√° chu·ªói
# -----------------------
def clean_text(s: str) -> str:
    return re.sub(r'\s+', ' ', s).strip()

# -----------------------
# H√†m ƒë·ªçc lawbank (c√≥ s·ªë th·ª© t·ª± v√† Ref)
# -----------------------
def load_lawbank(docx_file):
    """
    ƒê·ªçc lawbank: file c√≥ ƒë√°nh s·ªë 1., 2., ... m·ªói block c√≥ c√¢u h·ªèi, ƒë√°p √°n a./b./c./d. 
    ƒê√°p √°n ƒë√∫ng c√≥ d·∫•u * ·ªü tr∆∞·ªõc ch·ªØ c√°i (v√≠ d·ª• *a. ...). C√≥ th·ªÉ c√≥ "Ref."
    """
    try:
        doc = Document(docx_file)
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file lawbank: {e}")
        return []

    text = "\n".join([p.text for p in doc.paragraphs if p.text and p.text.strip()])
    if not text.strip():
        return []

    # T√°ch blocks theo s·ªë th·ª© t·ª± (1., 2., ...)
    blocks = re.finditer(r'\d+\.\s*(.*?)(?=(?:\n\s*\d+\.\s*)|\Z)', text, flags=re.S)
    questions = []

    for b in blocks:
        part = b.group(1).strip()
        if not part:
            continue

        # Lo·∫°i b·ªè ph·∫ßn Ref n·∫øu c√≥ (kh√¥ng c·∫ßn)
        part = re.split(r'\bRef[:.]', part, flags=re.I)[0].strip()

        # Th√™m newline tr∆∞·ªõc m·ªçi marker ƒë√°p √°n (a. b. c. d. ho·∫∑c a) b) ...), k·ªÉ c·∫£ *a.)
        part = re.sub(r'(?<!\n)(?=[*]?\s*[A-Da-d]\s*[.\)])', '\n', part)

        lines = [l.strip() for l in part.splitlines() if l.strip()]
        if not lines:
            continue

        # D√≤ng ƒë·∫ßu l√† question (c√≥ th·ªÉ d√†i)
        qtext = clean_text(lines[0])

        opts = []
        correct = ""

        for ln in lines[1:]:
            m = re.match(r'^[*]?\s*([A-Da-d])\s*[.\)]\s*(.*)$', ln, flags=re.S)
            if m:
                letter = m.group(1).lower()
                opt_body = clean_text(m.group(2))
                opt_string = f"{letter}. {opt_body}"
                opts.append(opt_string)
                if ln.strip().startswith("*"):
                    correct = opt_string
            else:
                # n·∫øu c√≥ d√≤ng kh√¥ng kh·ªõp marker ƒë√°p √°n, c√≥ th·ªÉ d√≤ng n·ªëi ti·∫øp c·ªßa ƒë√°p √°n tr∆∞·ªõc -> n·ªëi v√†o cu·ªëi option tr∆∞·ªõc
                if opts:
                    opts[-1] = opts[-1] + " " + clean_text(ln)
                    opts[-1] = clean_text(opts[-1])
                else:
                    # n·∫øu ch∆∞a c√≥ options, n·ªëi v√†o c√¢u h·ªèi
                    qtext = qtext + " " + clean_text(ln)

        if opts:
            if not correct:
                correct = opts[0]
            questions.append({"question": qtext, "options": opts, "answer": correct})

    return questions


# -----------------------
# H√†m ƒë·ªçc cabbank (kh√¥ng ƒë√°nh s·ªë, ƒë√°p √°n c√≥ th·ªÉ d√≠nh)
# -----------------------
def load_cabbank(docx_file):
    """
    ƒê·ªçc cabbank: kh√¥ng ƒë√°nh s·ªë. M·ªói c√¢u l√† m·ªôt ho·∫∑c nhi·ªÅu ƒëo·∫°n vƒÉn, sau ƒë√≥ c√≥ a./b./c. (c√≥ th·ªÉ d√≠nh).
    ƒê√°p √°n ƒë√∫ng c√≥ d·∫•u * ·ªü tr∆∞·ªõc ch·ªØ c√°i.
    """
    try:
        doc = Document(docx_file)
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file cabbank: {e}")
        return []

    paragraphs = [p.text for p in doc.paragraphs if p.text and p.text.strip()]
    if not paragraphs:
        return []

    text = "\n".join(paragraphs)

    # Th√™m newline tr∆∞·ªõc m·ªçi marker ƒë√°p √°n (a. b. c. d. ho·∫∑c a) b) ...), k·ªÉ c·∫£ *a.)
    text = re.sub(r'(?<!\n)(?=[*]?\s*[A-Da-d]\s*[.\)])', '\n', text)

    lines = [l.strip() for l in text.splitlines() if l.strip()]

    questions = []
    current_q = {"question": "", "options": [], "answer": ""}

    for ln in lines:
        m = re.match(r'^[*]?\s*([A-Da-d])\s*[.\)]\s*(.*)$', ln, flags=re.S)
        if m:
            # ƒê√¢y l√† d√≤ng ƒë√°p √°n
            letter = m.group(1).lower()
            body = clean_text(m.group(2))
            opt_string = f"{letter}. {body}"
            current_q["options"].append(opt_string)
            if ln.strip().startswith("*"):
                current_q["answer"] = opt_string
        else:
            # Kh√¥ng ph·∫£i ƒë√°p √°n => c√¢u h·ªèi (ho·∫∑c n·ªëi ti·∫øp c√¢u h·ªèi)
            if current_q["options"]:
                # ƒë√£ c√≥ options t·ª´ c√¢u tr∆∞·ªõc -> l∆∞u c√¢u tr∆∞·ªõc v√† b·∫Øt ƒë·∫ßu c√¢u m·ªõi
                if not current_q["answer"] and current_q["options"]:
                    current_q["answer"] = current_q["options"][0]
                questions.append(current_q)
                current_q = {"question": clean_text(ln), "options": [], "answer": ""}
            else:
                # ch∆∞a c√≥ options: n·ªëi ti·∫øp c√¢u h·ªèi
                if current_q["question"]:
                    current_q["question"] = clean_text(current_q["question"] + " " + ln)
                else:
                    current_q["question"] = clean_text(ln)

    # Th√™m c√¢u cu·ªëi c√πng n·∫øu c√≥
    if current_q["question"] and current_q["options"]:
        if not current_q["answer"]:
            current_q["answer"] = current_q["options"][0]
        questions.append(current_q)

    return questions


# -----------------------
# Giao di·ªán Streamlit
# -----------------------
st.set_page_config(page_title="Ng√¢n h√†ng c√¢u h·ªèi", layout="wide")
st.title("üìö Ng√¢n h√†ng c√¢u h·ªèi (Lawbank & Cabbank)")

# Cho ph√©p upload .docx ƒë·ªÉ test (∆∞u ti√™n file upload n·∫øu c√≥)
uploaded_file = st.file_uploader("Upload file .docx (n·∫øu mu·ªën test file b·∫•t k·ª≥)", type=["docx"])

bank_choice = st.selectbox("Ch·ªçn ng√¢n h√†ng mu·ªën l√†m:", ["Ng√¢n h√†ng Lu·∫≠t", "Ng√¢n h√†ng K·ªπ thu·∫≠t"])

# N·∫øu upload file, d√πng file ƒë√≥; n·∫øu kh√¥ng, d√πng file m·∫∑c ƒë·ªãnh
if uploaded_file is not None:
    file_source = uploaded_file
else:
    file_source = "lawbank.docx" if "Lu·∫≠t" in bank_choice else "cabbank.docx"

# Load questions theo l·ª±a ch·ªçn
if "Lu·∫≠t" in bank_choice:
    questions = load_lawbank(file_source)
else:
    questions = load_cabbank(file_source)

# Debug: hi·ªán s·ªë c√¢u v√† 3 c√¢u ƒë·∫ßu trong expander ƒë·ªÉ b·∫°n ki·ªÉm tra nhanh
with st.expander("üîç Debug: Xem tr∆∞·ªõc k·∫øt qu·∫£ parsing (3 c√¢u ƒë·∫ßu)"):
    st.write(f"Bank: {bank_choice}")
    st.write(f"S·ªë c√¢u ƒë·ªçc ƒë∆∞·ª£c: {len(questions)}")
    for idx, q in enumerate(questions[:3], start=1):
        st.markdown(f"**{idx}.** {q['question']}")
        for o in q['options']:
            marker = "‚úÖ" if o == q['answer'] else ""
            st.write(f"- {o} {marker}")

if not questions:
    st.error(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c c√¢u h·ªèi n√†o t·ª´ file cho ng√¢n h√†ng '{bank_choice}'.\n- N·∫øu b·∫°n d√πng file m·∫∑c ƒë·ªãnh, ki·ªÉm tra t√™n file v√† ƒë·ªãnh d·∫°ng.\n- N·∫øu b·∫°n upload, ƒë·∫£m b·∫£o file .docx ch·ª©a c√¢u h·ªèi theo c·∫•u tr√∫c (c√¢u r·ªìi c√°c ƒë√°p √°n a./b./c.).")
    st.stop()

# Ph√¢n nh√≥m
TOTAL = len(questions)
group_size = 10
num_groups = math.ceil(TOTAL / group_size)
group_labels = [f"C√¢u {i*group_size+1} - {min((i+1)*group_size, TOTAL)}" for i in range(num_groups)]

# Session state c∆° b·∫£n
if "current_bank" not in st.session_state:
    st.session_state.current_bank = bank_choice
if "last_group" not in st.session_state:
    st.session_state.last_group = None
if "submitted" not in st.session_state:
    st.session_state.submitted = False

# Reset khi ƒë·ªïi ng√¢n h√†ng
if st.session_state.current_bank != bank_choice:
    for k in list(st.session_state.keys()):
        if k.startswith("q_"):
            del st.session_state[k]
    st.session_state.submitted = False
    st.session_state.current_bank = bank_choice

# Ch·ªçn nh√≥m
selected_group = st.selectbox("üìò B·∫°n mu·ªën l√†m nh√≥m c√¢u n√†o?", group_labels, index=0)

if st.session_state.last_group != (selected_group + bank_choice):
    for k in list(st.session_state.keys()):
        if k.startswith("q_"):
            del st.session_state[k]
    st.session_state.submitted = False
    st.session_state.last_group = selected_group + bank_choice

start = group_labels.index(selected_group) * group_size
end = min(start + group_size, TOTAL)
batch = questions[start:end]

# Hi·ªÉn th·ªã c√¢u h·ªèi
placeholder_choice = "-- Ch∆∞a ch·ªçn --"

if not st.session_state.submitted:
    st.markdown(f"### üß© Nh√≥m {selected_group}  (t·ªïng {len(batch)} c√¢u)")
    for i, q in enumerate(batch, start=start + 1):
        st.markdown(f"<div style='text-align:left'><b>{i}. {q['question']}</b></div>", unsafe_allow_html=True)
        options_ui = [placeholder_choice] + q["options"]
        # L∆∞u gi√° tr·ªã ch·ªçn (m·∫∑c ƒë·ªãnh l√† placeholder)
        st.radio("", options_ui, index=0, key=f"q_{i}")
        st.markdown("<hr>", unsafe_allow_html=True)

    if st.button("‚úÖ N·ªôp b√†i v√† xem k·∫øt qu·∫£"):
        unanswered = [i for i in range(start + 1, end + 1) if st.session_state.get(f"q_{i}") in (None, placeholder_choice)]
        if unanswered:
            st.warning(f"‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn ƒë√°p √°n cho {len(unanswered)} c√¢u: {', '.join(map(str, unanswered))}")
        else:
            st.session_state.submitted = True
            st.experimental_rerun()

else:
    # T√≠nh ƒëi·ªÉm v√† hi·ªÉn th·ªã k·∫øt qu·∫£
    score = 0
    for i, q in enumerate(batch, start=start + 1):
        selected = st.session_state.get(f"q_{i}")
        # N·∫øu user ch·ªçn placeholder, treat as None
        if selected in (None, placeholder_choice):
            selected_display = None
        else:
            selected_display = selected
        correct = q["answer"]

        if selected_display == correct:
            score += 1
            st.success(f"{i}. {q['question']}\n\n‚úÖ ƒê√∫ng ‚Äî {correct}")
        else:
            st.error(f"{i}. {q['question']}\n\n‚ùå Sai. B·∫°n ch·ªçn: **{selected_display or '---'}**  ‚Üí ƒê√°p √°n ƒë√∫ng: **{correct}**")
        st.markdown("<hr>", unsafe_allow_html=True)

    st.subheader(f"üéØ K·∫øt qu·∫£: {score}/{len(batch)} c√¢u ƒë√∫ng")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÅ L√†m l·∫°i nh√≥m n√†y"):
            for i in range(start + 1, end + 1):
                key = f"q_{i}"
                if key in st.session_state:
                    del st.session_state[key]
            st.session_state.submitted = False
            st.experimental_rerun()
    with col2:
        if st.button("‚û°Ô∏è Sang nh√≥m kh√°c"):
            for i in range(start + 1, end + 1):
                key = f"q_{i}"
                if key in st.session_state:
                    del st.session_state[key]
            st.session_state.submitted = False
            st.experimental_rerun()
